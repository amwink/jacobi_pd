# helpful link:
#https://stackoverflow.com/questions/27644586/how-to-set-up-travis-ci-with-multiple-languages


matrix:
  include:

    - language: cpp
      compiler: gcc
      # Optional: "dist" specifies the operating system ("bionic"=ubuntu18.04)
      dist: bionic
      install:
        - sudo apt-get install valgrind
        #- pip install --user cpp-coveralls
        #- sudo apt-get install lcov
        #- gem install coveralls-lcov
        #- sudo apt-get install -qq cppcheck
      script:
        #- CODECOV_TOKEN="1e53f9a7-e867-40a5-b302-2520345fb5eb"
        - cd tests
        - g++ -g -O0 -coverage -fno-inline -fno-inline-small-functions -fno-default-inline -I../include -o test_jacobi test.cpp
        # Note: With such a huge spread of eigenvalue magnitudes(1e-09..1e+09),
        # some of the smaller eigenvalues (and their corresponding eigenvectors)
        # will be calculated incorrectly due to numeric underflow.
        # The test will not fail in these cases since this is to be expected.
        # Only errors which are within machine precision of the largest
        # eigenvalues are considered important.
        #- cppcheck --quiet --error-exitcode=1
        - ./test_jacobi 2 1000 1e-09 1e+09
        - ./test_jacobi 5 1000 1e-09 1e+09
        - ./test_jacobi 20 100 1e-09 1e+09
        #- now test again with degenerate eigenvalues
        - ./test_jacobi 2 1000 1e-09 1e+09 2
        - ./test_jacobi 5 1000 1e-09 1e+09 2
        - ./test_jacobi 20 100 1e-09 1e+09 5
        #- now use valgrind to find memory leaks and other errors:
        - g++ -g -O0 -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        #- now test again using vector<vector<double>> instead of double **
        - g++ -g -O0 -DUSE_VECTOR_OF_VECTORS -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        #- now test again using array<array<double,5>,5>
        - g++ -g -O0 -DUSE_ARRAY_OF_ARRAYS -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        #- now test again using double (*)[5]
        - g++ -g -O0 -DUSE_C_FIXED_SIZE_ARRAYS -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        - cd ../
      after_success:
        - bash <(curl -s https://codecov.io/bash)
        # alternate method:
        #- coveralls --gcov --gcov-options '\-lp' --exclude tests
        ## alternate method:
        ##- lcov --directory . --capture --output-file coverage.info
        ##- lcov --remove coverage.info '/usr/*'  --output-file coverage.info
        ##- lcov --list coverage.info
        ##- coveralls-lcov coverage.info



    - language: cpp
      compiler: clang
      # Optional: "dist" specifies the operating system ("bionic"=ubuntu18.04)
      dist: bionic
      install:
        - sudo apt-get install valgrind
        #- pip install --user cpp-coveralls
        #- sudo apt-get install lcov
        #- gem install coveralls-lcov
        #- sudo apt-get install -qq cppcheck
      script:
        #- CODECOV_TOKEN="1e53f9a7-e867-40a5-b302-2520345fb5eb"
        - cd tests
        - clang++ -g -O0 -coverage -fno-inline -I../include -o test_jacobi test.cpp
        #- cppcheck --quiet --error-exitcode=1
        # Note: With such a huge spread of eigenvalue magnitudes(1e-09..1e+09),
        # some of the smaller eigenvalues (and their corresponding eigenvectors)
        # will be calculated incorrectly due to numeric underflow.
        # The test will not fail in these cases since this is to be expected.
        # Only errors which are within machine precision of the largest
        # eigenvalues are considered important.
        - ./test_jacobi 2 1000 1e-09 1e+09
        - ./test_jacobi 5 1000 1e-09 1e+09
        - ./test_jacobi 20 100 1e-09 1e+09
        #- now test again with degenerate eigenvalues
        - ./test_jacobi 2 1000 1e-09 1e+09 2
        - ./test_jacobi 5 1000 1e-09 1e+09 2
        - ./test_jacobi 20 100 1e-09 1e+09 5
        - clang++ -g -O0 -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        #- now test again using vector<vector<double>> instead of double **
        - clang++ -g -O0 -DUSE_VECTOR_OF_VECTORS -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        #- now test again using array<array<double,5>,5>
        - clang++ -g -O0 -DUSE_ARRAY_OF_ARRAYS -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        #- now test again using double (*)[5]
        - clang++ -g -O0 -DUSE_C_FIXED_SIZE_ARRAYS -I../include -o test_jacobi test.cpp
        - valgrind --leak-check=yes --error-exitcode=1 ./test_jacobi 5 10 1e-09 1e+09
        - cd ../
      after_success:
        - bash <(curl -s https://codecov.io/bash)
        # alternate method:
        #- coveralls --gcov --gcov-options '\-lp' --exclude tests
        #- coveralls --gcov --gcov-options '\-lp' --exclude tests
        ## alternate method:
        ##- lcov --directory . --capture --output-file coverage.info
        ##- lcov --remove coverage.info '/usr/*'  --output-file coverage.info
        ##- lcov --list coverage.info
        ##- coveralls-lcov coverage.info

